---
title: "Practical Two"
format: html
editor: visual
---

```{}
```

## Running Code

setting the seed

```{r}
rm(list = ls())
set.seed(1)
```

creating x as a sequence of numbers from 1 to 100

```{r}
x<- 1:100
```

generate y as a noisy sine wave

```{r}
n <- length(x)
ei <- rnorm(n, mean=0 , sd=0.2)

y <- sin(x/10)+ ei
```

implementing the LOWESS Algorithm

```{r}

customLowess <- function(x, y, f = 2/3) {
  n <- length(x)  
  yhat <- numeric(n)
  k = max(ceiling(f*n),1)
  
  for (i in 1:n) {
    
    distance <- abs(x - x[i])
    neigh <- order(distance)[1:k]
    
    max_dist <- max(distance[neigh])
    
    if (max_dist ==0 ) {
      weights <- rep(1,k)
    } else {
      weights <- (1 - (distance[neigh] / max_dist)^3)^3
    }
    
    # weights[distance > max_dist] <- 0 
    
    X <- cbind(1,x[neigh])
    W <- diag(weights)
    y_neigh <- y[neigh]
    
    XtWX <- t(X) %*% W %*% X
    XtWy <- t(X) %*% W %*% y_neigh
    
    beta <- solve(XtWX, XtWy)

    yhat[i] <- beta[1] + beta[2]*x[i]
    
    

  }
  
  return(yhat)  
}

custom_lowess <- customLowess(x, y, f = 2/3)
```

Using Built-in lowess function

```{r}

Built_in_Lowess <-lowess(x, y, f = 2/3, iter = 0)$y

length(x)
length(y)
```

Plot both curves

```{r}
#| echo: false

plot(y~x, main = "Custom Lowess vs Built-in Lowess", xlab = "X", ylab = "Y", pch = 16, col = "blue")

lines(x, custom_lowess, col = "red", lwd = 2)  
lines(y, Built_in_Lowess, col = "green", lwd = 2)

legend("topright", legend = c("Original Data", "Custom Lowess", "Built-in Lowess"), 
       col = c("blue", "red", "green"), pch = c(16, NA, NA), lwd = c(1, 2, 2))
```
